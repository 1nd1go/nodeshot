Ubuntu 12.04 LTS

Become root:

	sudo -s

Install postgresql 9.1 and spatial libraries

	apt-get install python-software-properties software-properties-common build-essential postgresql-9.1 postgresql-server-dev-9.1 libxml2-dev libproj-dev libjson0-dev xsltproc docbook-xsl docbook-mathml gdal-bin binutils libxml2 libxml2-dev libxml2-dev checkinstall proj libpq-dev libgdal1-dev postgresql-contrib
	
Build GEOS library from source

	wget http://download.osgeo.org/geos/geos-3.3.8.tar.bz2
	tar xvfj geos-3.3.8.tar.bz2
	cd geos-3.3.8
	./configure
	make
	sudo make install
	cd ..

Postgis 2.0

	wget http://download.osgeo.org/postgis/source/postgis-2.0.3.tar.gz
	tar xfvz postgis-2.0.3.tar.gz
	cd postgis-2.0.3
	./configure
	make
	sudo make install
	sudo ldconfig
	sudo make comments-install

Change postgres user password:

	passwd postgres

Become postgres user:

	su postgres

then:

	createdb  nodeshot
	psql nodeshot
	CREATE EXTENSION postgis;
	CREATE EXTENSION postgis_topology;
	CREATE EXTENSION hstore;
	CREATE USER nodeshot WITH PASSWORD 'your_password';
	GRANT ALL PRIVILEGES ON DATABASE "nodeshot" to nodeshot;

Install Nginx (alternatively use apache2)

	apt-get install nginx-full nginx-common openssl zlib-bin

Install python libraries:

	apt-get install python-setuptools python-virtualenv python-dev

Clone repository:

TODO: best to install via pip when the project is ready

	mkdir /var/django
	cd /var/django
	git clone https://github.com/nemesisdesign/nodeshot.git nodeshot
	cd nodeshot
	git checkout refactoring
	
# TODO: write how to:

* create a project
* secret key

Copy settings.example.py and modify according to needs

	cp settings.example.py settings.py
	vim settings.py

Create virtual environment, activate and install dependencies:

	cd /var/django/nodeshot/projects/ninux
	virtualenv python
	source python/bin/activate
	pip install -r ../../requirements.txt
	# will prompt you to create a superuser, proceed!
	python manage.py syncdb && python manage.py migrate
	# static files (css, js, images)
	python manage.py collectstatic

Install and configure supervisord:

	sudo apt-get install supervisor
	vim /etc/supervisor/conf.d/nodeshot

Save this in /etc/supervisor/conf.d/nodeshot

	[program:nodeshot]
	command=/var/django/nodeshot/projects/ninux/python/bin/python /var/django/nodeshot/projects/ninux/server.py
	process_name=nodeshot
	user=www-data
	autostart=true
	autorestart=true

Then run:

	supervisorctl update


Configure nginx with SSL and reverse proxy to tornado

	upstream nodeshot{
		server 127.0.0.1:8080  max_fails=5  fail_timeout=5s;
	}
	
	server {
		listen   443; ## listen for ipv4; this line is default and implied
		listen   [::]:443 default ipv6only=on; ## listen for ipv6
	
		root /var/www/nodeshot;
		index index.html index.htm;
	
		# Make site accessible from domain
		server_name nodeshot.yourdomain.com;
	
		ssl on;
			ssl_certificate cert.pem;
			ssl_certificate_key cert.key;
	
			ssl_session_timeout 5m;
	
			ssl_protocols SSLv3 TLSv1;
			ssl_ciphers ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv3:+EXP;
			ssl_prefer_server_ciphers on;
	
		location / {
			proxy_set_header Host		$host;
			proxy_set_header X-Real-Ip	$remote_addr;
			proxy_pass http://nodeshot;	# tornado and django
		}
	
		#error_page 404 /404.html;
	
		# redirect server error pages to the static page /50x.html
		#
		#error_page 500 502 503 504 /50x.html;
		#location = /50x.html {
		#	root /usr/share/nginx/www;
		#}
	
		# deny access to .htaccess files, if Apache's document root
		# concurs with nginx's one
		#
		#location ~ /\.ht {
		#	deny all;
		#}
	}
	
	server {
			listen   80; ## listen for ipv4; this line is default and implied
			listen   [::]:80 default ipv6only=on; ## listen for ipv6
	
			# Make site accessible from domain
			server_name nodeshot.yourdomain.com;
	
		return 301 https://$host$request_uri;
	}
	
