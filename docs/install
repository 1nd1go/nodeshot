This file describes how to install nodeshot in a production environment.

This doc is a work in progress.

Ubuntu 12.04 LTS

Become root:

	sudo -s

Install postgresql 9.1 and spatial libraries

	apt-get install python-software-properties software-properties-common build-essential postgresql-9.1 postgresql-server-dev-9.1 libxml2-dev libproj-dev libjson0-dev xsltproc docbook-xsl docbook-mathml gdal-bin binutils libxml2 libxml2-dev libxml2-dev checkinstall proj libpq-dev libgdal1-dev postgresql-contrib
	
Build GEOS library from source

	wget http://download.osgeo.org/geos/geos-3.3.8.tar.bz2
	tar xvfj geos-3.3.8.tar.bz2
	cd geos-3.3.8
	./configure
	make
	sudo make install
	cd ..

Postgis 2.0

	wget http://download.osgeo.org/postgis/source/postgis-2.0.3.tar.gz
	tar xfvz postgis-2.0.3.tar.gz
	cd postgis-2.0.3
	./configure
	make
	sudo make install
	sudo ldconfig
	sudo make comments-install

Change postgres user password:

	passwd postgres

Become postgres user:

	su postgres

then:

	createdb  nodeshot
	psql nodeshot
	CREATE EXTENSION postgis;
	CREATE EXTENSION postgis_topology;
	CREATE EXTENSION hstore;
	CREATE USER nodeshot WITH PASSWORD 'your_password';
	GRANT ALL PRIVILEGES ON DATABASE "nodeshot" to nodeshot;

Install Nginx (alternatively use apache2)

	apt-get install nginx-full nginx-common openssl zlib-bin

Install python libraries:

	apt-get install python-setuptools python-virtualenv python-dev

Clone repository:

TODO: best to install via pip when the project is ready

	mkdir /var/django
	cd /var/django
	git clone https://github.com/nemesisdesign/nodeshot.git nodeshot
	cd nodeshot
	git checkout refactoring
	
# TODO: write how to:

* create a project
* secret key

Copy settings.example.py and modify according to needs

	cp settings.example.py settings.py
	vim settings.py

The minimum configuration keys that you need to ensure are set according to your configuration are the following:

	DATABASE (host, db, user and pwd)
	SITE_DOMAIN (domain or ip address)
	PROTOCOL (http or https)
	SECRET_KEY (see below)
	ALLOWED_HOSTS

Remember to uncomment the secret key setting and slighlty change it:

	#SECRET_KEY = .....
	# must be uncommented
	SECRET_KEY = 'keep same length but change some characters'

Create virtual environment, activate and install dependencies:

	cd /var/django/nodeshot/projects/ninux
	virtualenv python
	source python/bin/activate
	pip install -r ../../requirements.txt
	# will prompt you to create a superuser, proceed!
	python manage.py syncdb && python manage.py migrate
	# static files (css, js, images)
	python manage.py collectstatic

Install uWSGI (for production)

    # deactivate python virtual environment
    deactivate
    # install uwsgi globally
    pip install uwsgi

Create a new ini file:

    vim /var/django/nodeshot/projects/ninux/wsgi.ini
    
With this config:

    [uwsgi]
    chdir=/var/django/nodeshot/projects/ninux
    module=ninux.wsgi:application
    master=True
    pidfile=/var/django/nodeshot/projects/ninux/uwsgi.pid
    socket=127.0.0.1:3031
    processes=2
    harakiri=20
    max-requests=5000
    vacuum=True
    home=/var/django/nodeshot/projects/ninux/python
    enable-threads=True

Install supervisord:

	sudo apt-get install supervisor

Create new config file:

    vim /etc/supervisor/conf.d/nodeshot.conf

Save this in /etc/supervisor/conf.d/nodeshot.conf

    [program:uwsgi]
    user=uwsgi
    directory=/var/django/nodeshot/projects/ninux
    command=uwsgi --ini uwsgi.ini
    autostart=true
    autorestart=true
    stopsignal=INT
    redirect_stderr=true
    stdout_logfile=/var/django/nodeshot/projects/ninux/uwsgi.log
    stdout_logfile_maxbytes=30MB
    stdout_logfile_backups=5

Repeat the same for celery:

    vim /etc/supervisor/conf.d/celery.conf

And paste:

    [program:celery]
    directory=/var/django/nodeshot/projects/ninux
    command=/var/django/nodeshot/projects/ninux/python/bin/python /var/django/nodeshot/projects/ninux/manage.py celery worker --loglevel=INFO
    autostart=true
    autorestart=true
    redirect_stderr=true
    stdout_logfile=/var/django/nodeshot/projects/ninux/celery.log
    stdout_logfile_maxbytes=30MB
    stdout_logfile_backups=10
    startsecs=10
    stopwaitsecs=600
    numprocs=1

And celery-beat:

    vim /etc/supervisor/conf.d/celery-beat.conf

And paste:

    [program:celery-beat]
    directory=/var/django/nodeshot/projects/ninux
    command=/var/django/nodeshot/projects/ninux/python/bin/python /var/django/nodeshot/projects/ninux/manage.py celery beat --loglevel=INFO
    autostart=true
    autorestart=true
    redirect_stderr=true
    stdout_logfile=/var/django/nodeshot/projects/ninux/celery-beat.log
    stdout_logfile_maxbytes=30MB
    stdout_logfile_backups=10
    startsects=10
    numprocs=1

Then run:

    supervisorctl update

You can check the status with:

    supervisorctl status

And you can also start, stop and restart.

Now create a dummy public folder:

    mkdir /var/www/nodeshot	

Create a temporary self signed SSL certificate:

    mkdir /etc/nginx/ssl
    cd /etc/nginx/ssl
    openssl req -new -x509 -nodes -out server.crt -keyout server.key 

Copy uwsgi_params file:

    cp /etc/nginx/uwsgi_params /etc/nginx/sites-available/

Configure nginx with SSL and uWSGI

The simplest configuration is to edit the default virtualhost:

    vim /etc/nginx/sites-available/default

and paste:
	
    server {
        listen   443; ## listen for ipv4; this line is default and implied
        listen   [::]:443 default ipv6only=on; ## listen for ipv6
        
        root /var/www/nodeshot;
        index index.html index.htm;
        
        # Make site accessible from domain
        # change this according to your domain
        server_name nodeshot.yourdomain.com;
        
        ssl on;
        ssl_certificate ssl/server.crt;
        ssl_certificate_key ssl/server.key;
        
        ssl_session_timeout 5m;
        
        ssl_protocols SSLv3 TLSv1;
        ssl_ciphers ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv3:+EXP;
        ssl_prefer_server_ciphers on;
        
        location / {
            uwsgi_pass 127.0.0.1:3031;
            include uwsgi_params;
            uwsgi_param HTTP_X_FORWARDED_PROTO https;
        }
        
        #error_page 404 /404.html;
        
        # redirect server error pages to the static page /50x.html
        #
        #error_page 500 502 503 504 /50x.html;
        #location = /50x.html {
        #	root /usr/share/nginx/www;
        #}
        
        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #	deny all;
        #}
    }
	
    server {
        listen   80; ## listen for ipv4; this line is default and implied
        listen   [::]:80 default ipv6only=on; ## listen for ipv6
        
        # Make site accessible from domain
        # change this according to your domain
        server_name nodeshot.yourdomain.com;
        
        return 301 https://$host$request_uri;
    }
	

Install Redis (we will use it as an AMQP Broker for Celery)

    pip install -U celery[redis]
	
	add-apt-repository ppa:chris-lea/redis-server
	apt-get update
	apt-get install redis-server
	
Test your installation and if everything works as expected change the DEBUG setting to False (leaving it to True might lead to poor performance or security issues)

    vim settings.py
	
	# set DEBUG to False
	DEBUG = False
	
	# save and exit

Restart all the processes

    service nginx restart && supervisorctl restart all